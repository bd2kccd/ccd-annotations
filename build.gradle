buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
	id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'edu.pitt.dbmi'
version = '0.8.0'
description = "CCD Annotations API"

jar {
    baseName = 'ccd-annotations'
    version = version
}

def compatibilityVersion = 1.8
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

ext {
	snippetsDir = file('build/generated-snippets')
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

ext {
    // ccd
    ccdDBVersion = '0.6.2'
    ccdOAuth2Version = '1.3.3'

    // documentation
    springfoxVersion = '2.4.0'
    springRestdocsVersion = '1.1.2.RELEASE'
}

dependencies {
    // compile time
    compile("edu.pitt.dbmi:ccd-db:${ccdDBVersion}")
    compile("edu.pitt.dbmi:ccd-oauth2:${ccdOAuth2Version}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude(module: "spring-boot-starter-tomcat")
    }
    compile("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-hateoas:${springBootVersion}")

    // testing
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc:${springRestdocsVersion}")

    // documentation
    compile("io.springfox:springfox-swagger2:${springfoxVersion}")
    compile("io.springfox:springfox-swagger-ui:${springfoxVersion}")

	//asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${springRestdocsVersion}"

}

test {
	outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
	inputs.dir snippetsDir
	dependsOn test
}

jar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

task start(dependsOn: [build, jar, asciidoctor]) {
    description "Starts the server"
    doLast { 
        javaexec {
            main = '-jar'
            args = [jar.archivePath]
        }
    }
}

// gradle wrapper (./gradlew)
task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}
